---
# tasks file for docker.ubuntu
- name: Ensure that Ubuntu version is supported
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of Ubuntu for this role"
  when: ansible_lsb.id|lower == "ubuntu" and ( ansible_distribution_version|version_compare('12.04', '<') or ansible_distribution_version|version_compare('12.10', '=') )

- name: Install docker package
  apt:
    name: "{{ docker_pkg_name }}"
    state: "present"

- name: Set systemd playbook var
  set_fact:
    is_systemd: true
  when: ( ansible_lsb.id|lower == "ubuntu" and ansible_distribution_version|version_compare('15.04', '>=') )

- name: Set docker daemon options
  copy:
    content: "DOCKER_OPTS=\"{{ docker_opts.rstrip() }}\""
    dest: /etc/default/docker
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart docker
  when: docker_opts != "" and not is_systemd

- name: Create systemd configuration directory for Docker service (systemd)
  file:
    dest: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: 0755
  when: docker_opts != "" and is_systemd

- name: Set docker daemon options (systemd)
  copy:
    content: |
      [Service]
      Environment="DOCKER_OPTS={{ docker_opts.rstrip() }}"
    dest: /etc/systemd/system/docker.service.d/env.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart docker
  when: docker_opts != "" and is_systemd

- name: Ensure docker daemon options used (systemd)
  template:
    src: docker.conf
    dest: /etc/systemd/system/docker.service.d/docker.conf
  notify:
    - Reload systemd
    - Restart docker
  when: docker_opts != "" and is_systemd

- name: Check if /etc/updatedb.conf exists
  stat:
    path: /etc/updatedb.conf
  register: updatedb_conf_exists

- name: Ensure updatedb does not index /var/lib/docker
  lineinfile:
    dest: /etc/updatedb.conf
    state: present
    backrefs: yes
    regexp: '^PRUNEPATHS="(/var/lib/docker )?(.*)"$'
    line: 'PRUNEPATHS="/var/lib/docker \2"'
  when: updatedb_conf_exists.stat.exists

- name: Check if /etc/default/ufw exists
  stat:
    path: /etc/default/ufw
  register: ufw_default_exists

- name: Change ufw default forward policy from drop to accept
  lineinfile:
    dest: /etc/default/ufw
    regexp: "^DEFAULT_FORWARD_POLICY="
    line: "DEFAULT_FORWARD_POLICY=\"ACCEPT\""
  when: ufw_default_exists.stat.exists

- name: Set docker HTTP_PROXY if docker_http_proxy defined
  lineinfile:
    dest: /etc/default/docker
    regexp: "^export HTTP_PROXY="
    line: "export HTTP_PROXY=\"{{docker_http_proxy}}\""
    state: present
  when: docker_http_proxy is defined and (docker_http_proxy != None)
  notify:
    - Restart docker
  tags: proxy

- name: Set docker HTTPS_PROXY if docker_https_proxy defined
  lineinfile:
    dest: /etc/default/docker
    regexp: "^export HTTPS_PROXY="
    line: "export HTTPS_PROXY=\"{{docker_https_proxy}}\""
    state: present
  when: docker_https_proxy is defined and (docker_https_proxy != None)
  notify:
    - Restart docker
  tags: proxy

- name: Start docker
  service:
    name: docker
    state: started
  when: docker_pkg_name.find('lxc-docker') != -1 or docker_pkg_name.find('docker-engine') != -1

- name: Start docker.io
  service:
    name: docker
    state: started
  when: docker_pkg_name == 'docker.io'

  # ATTENTION: this task can potentially create new users!
- name: Add users to the docker group
  user:
    name:   "{{ item }}"
    groups: docker
    append: yes
  with_items: "{{docker_group_members}}"
  when: docker_group_members is defined
